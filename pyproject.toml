[project]
name = "ss-utils-logging"
version = "0.0.7"
description = "Utilities for logging with orjson serialization and advanced features"
requires-python = ">=3.10"
authors = [{ name = "shern" }]
keywords = ["logging", "orjson", "configuration", "yaml"]
dependencies = [
    "orjson>=3.11.0",
    "pyyaml>=6.0.2",
    "typer-slim[standard]>=0.16.0",
]
readme = "README.md"
license = { text = "MIT" }

[project.urls]
Homepage = "https://github.com/shern2/ss-utils-logging"
Repository = "https://github.com/shern2/ss-utils-logging"
Issues = "https://github.com/shern2/ss-utils-logging/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ss_utils_logging"]

[project.scripts]
ss-utils-logging = "ss_utils_logging.cli:app"


[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Execution options
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--asyncio-mode=auto",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]


[tool.ruff]
line-length = 120
fix = true
unsafe-fixes = false

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",  # default Ruff rules
    "E",  # pycodestyle Errors
    "W",  # pycodestyle Warnings
    "I",  # import sorting
    "UP", # modern syntax updates
    "B",  # flake8 common pitfalls & best practices
    "Q",  # flake8 consistent quotes
    "N",  # naming conventions,
]
ignore = [
    "F401", # Unused import
    "E501", # line too long
    "B008", # function call in argument defaults
    "D400", # first line in docstring should end with period
    # "D413", # missing blank line after last section
    # "W293", # blank line contains whitespace
    # "W291", # trailing whitespace

]

fixable = ["ALL"]

extend-select = [
    "PLR2004", # magic value used in comparison
    "D101",    # missing docstring in public class
    "D102",    # missing docstring in public method
    "D103",    # missing docstring in public function
    "D201",    # no blank lines before function docstring
    "D202",    # no blank lines after function docstring
    "D215",    # section underline is over-indented
    "T201",    # 'print' found (should use logging)
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.per-file-ignores]
# Allow print statements in tests, examples, and notebooks
"tests/**/*.py" = ["T201", "PLR2004"]
"examples/**/*.py" = ["T201"]
"notebooks/**/*.ipynb" = ["T201"]


[tool.mypy]
disallow_any_generics = true
disallow_untyped_defs = true
disallow_untyped_calls = true
warn_unused_configs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict = false
warn_return_any = true
plugins = ['pydantic.mypy']
packages = ["src"]

[[tool.mypy.overrides]]
module = ["opentelemetry.*"]
ignore_missing_imports = true

[dependency-groups]
dev = [
    "ipykernel>=6.29.5",
    "ruff>=0.11.10",
    "mypy>=1.15.0",
    # Testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",

]
